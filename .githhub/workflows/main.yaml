# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Development

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
env:
  ## Sets environment variable
  PORT: 5000

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Run unit tests
      run: yarn test
  
  funcional:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [test]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Creating network
      run: docker network create "microservice-network"

    - name: Build docker-composer
      run: docker-compose up -d

    - name: Check running container
      run: docker ps -a

    - name: Running funcional tests
      run: yarn test:func

  stage:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [test, funcional]
    runs-on: ubuntu-latest

    steps:
    - name: Wait for Render Deployment
      uses: bounceapp/render-action@0.6.0
      with:
        render-token: ${{ secrets.RENDER_TOKEN }}

  e2e:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [test, funcional, stage]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Running e2e tests
      run: yarn test:e2e
  
  deploy:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') && github.ref == 'refs/heads/main' }}
    needs: [test, funcional, stage, e2e]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: yarn --frozen-lockfile
    
#     - name: Running application
#       run: yarn start:dev

name: Stage checks

on:
  push:
    branches:
      - stage
  pull_request:
    branches:
      - stage
      
env:
  ## Sets environment variable
  PORT: 5000

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Run unit tests
      run: yarn test
  
  funcional:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [test]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Creating network
      run: docker network create "microservice-network"

    - name: Build docker-composer
      run: docker-compose up -d

    - name: Check running container
      run: docker ps -a

    - name: Running funcional tests
      run: yarn test:func
